== Does mpv have an official GUI? ==

No. But there is the OSC (on-screen-controller), which lets you control playback with the mouse. Requires mpv to be compiled with Lua support.

There are some [https://github.com/mpv-player/mpv/wiki/Applications-using-mpv#gui-frontends 3rd party GUI frontends listed here].

== Tearing ==

[https://en.wikipedia.org/wiki/Screen_tearing Tearing] is a very annoying artifact that makes it look like the video has a horizontal line across the video. The video isn’t properly joining on that line. The line can be fixed or moving. Sometimes it’s not a line, but a bunch of blocks. It can be unnoticeable if there is no movement, but very apparent if the camera moves e.g. at low speed.

Tearing is generally not something a video player can do anything about. It depends on the hardware, drivers, the video output selected in mpv (VO), and possibly the desktop environment / compositor.

Changing the compositor settings can sometimes help with tearing.

=== MacOS (OSX) ===

Never seen it tearing.

=== Windows ===

Whether tearing happens with OpenGL may depend on the backend and how it interacts with the GPU and the compositor via the swap chain. Try with playing the <code>--angle-</code> options, which configure the d3d swapchain. You can also try various with <code>--opengl-backend=NAME</code>, where <code>NAME</code> is the name of the backend. <code>dxinterop</code> seems to perform best generally, but it will crash randomly with some older buggy Intel drivers. The deprecated <code>--vo=direct3d</code> should roughly behave like <code>--angle-renderer=d3d9</code>.

=== X11/Nvidia ===

Nvidia should generally not tear. Sometimes, it tears in windowed mode, but not in fullscreen (solution unknown). There are additional problems on multimonitor systems.

<ul>
<li>Try enabling <code>ForceFullCompositionPipeline</code>.</li>
<li>Try with and without a compositor.</li>
<li><p>Try disabling the composite extension in xorg.conf:</p>
<pre>Section "Extensions"
    Option "Composite" "Disable"
EndSection</pre></li>
<li>Set the performance mode to maximum performance. Energy saving often interferes with proper vo_opengl operation, and sometimes even appears to cause tearing.</li>
<li><p>Try <code>--vo=vdpau</code>.</p></li>
<li><p>To fix tearing under KDE, create file <code>/etc/profile.d/kwin.sh</code> with content:</p>
<pre>export __GL_SYNC_TO_VBLANK=1
export __GL_YIELD=USLEEP</pre></li>
</ul>

=== X11/Nvidia with PRIME ===

If your Xorg-server is older than ABI version 23, or your kernel is older than version 4.5, or your nvidia driver is not up to date, then you will inevitably get tearing due to the lack of [https://devtalk.nvidia.com/default/topic/957814/linux/prime-and-prime-synchronization/1 PRIME buffer synchronisation]. You cannot fix this tearing with any of the other methods described on this page. Assume fetal position and cry, or switch to using your Intel GPU instead.

=== X11/Intel ===

Intel tears out of the box. <b>However, most of the time, tearing with the gpu vo (the default) can be fixed by enabling a compositor.</b> If this doesn't apply to you, try the following options.

<ul>
<li><p>Try enabling SNA and the <code>TearFree</code> option.</p>
Unfortunately, this can cause stability issues - GL applications sometimes randomly crash. Somewhere, there’s a claim that adding <code>i915.semaphores=1</code> to your kernel parameters fixes the crashes.</li>
<li>Try disabling SNA by using UXA (on older hardware).</li>
<li>Try <code>--x11-bypass-compositor=no</code></li>
<li>Try <code>--vo=xv --xv-adaptor=N</code>, and try 0 or 1 for <code>N</code>. This may fix tearing if the other methods fail, but keep in mind that using Xv with mpv is strongly discouraged.</li>
<li><p>Try <code>--vo=vaapi</code>. Although this is Intel’s native video output method, it seems to fix tearing only very rarely. Do keep in mind though that the <code>vaapi</code> vo does not provide the high quality rendering that the <code>gpu</code> vo is capable of</p></li>
<li><p>Try <code>--vo=sdl</code>. This will likely use your 2d acceleration, which means that this won't fix tearing if you experience tearing with any of the non-<code>gpu</code> VOs. As with <code>vo=vaapi</code>, it doesn't offer the features that <code>gpu</code> offers.</p></li>

<li>If you are using Xorg's new "modesetting" driver and are not using a [https://en.wikipedia.org/wiki/Compositing_window_manager compositing window manager] (for example, you are using a plain window manager such as Awesome without a desktop manager like Gnome or KDE), you might need to run a compositor during video play-back. [https://github.com/chjj/compton Compton] might solve the issue if started with its <em>glx</em> backend:
<ol>
<li> Install Compton from a package manager or compile from source</li>
<li> Start Compton in a terminal as follows: <code>compton --backend=glx</code></li>
<li> Start mpv </li>
</ol>
[https://whirm.eu/posts/fix-for-xorgs-modesetting-driver-tearing/ This post] explains the procedure in more details.
</li>
</ul>

=== X11/AMD ===

<ul>
<li> The official drivers (AMDGPU-PRO/fglrx) are completely broken; so just avoid them altogether.</li>
<li> With amdgpu, you need to enable the TearFree option (either via <code>xrandr --set TearFree on</code> or via xorg.conf) to prevent tearing when not in fullscreen, unless you are using a compositor.</li>
<li> If you still get tearing in fullscreen mode when using vulkan, add `option "EnablePageFlip" "off"` to the `Device` section of your `xorg.conf`.</li>
<li> Unrelated, but if you have performance issues, try <code>echo high > /sys/class/drm/card0/device/power_dpm_force_performance_level</code>.</li>
</ul>

== I am using NVIDIA G-Sync on Windows and running mpv in fullscreen mode reduces the frame rate of other displays ==

This is likely caused by the way G-Sync interacts with Windows’ compositor. Using <code>--opengl-backend=win</code> should fix this because mpv gets an exclusive fullscreen window that way. The compositor unredirects exclusive fullscreen windows and is not forced to run at their frame rate.

== I can’t see the OSC/OSD/GUI! ==

The OSC requires Lua support. Install either one of Lua 5.1, 5.2 or LuaJIT, including development headers, and rebuild mpv. mpv does not and is unlikely to ever support Lua 5.3.<br />
If you didn’t build mpv yourself, ask the packager to enable Lua.

Also note that the OSC is invisible by default, but it should appear once you move the mouse over the mpv window.

== I can't see the window when mpv plays audio files. ==

Use <code>--force-window</code>.

== What's the difference between opengl-hq, gpu-hq, etc.? ==

The VO (video output) using GPU shader based rendering was renamed and updated a few times. Currently, the following things hold true:

* --vo=gpu is essentially the default (replaces --vo=opengl)
* --profile=gpu-hq is for selecting a preset with advanced scaling and so on (replaces --vo=opengl-hq and --profile=opengl-hq)
* GPU supports multiple backends, like d3d, opengl, vulkan (they are used by default in that order); use --gpu-api=vulkan to force e.g. vulkan, use --gpu-context=... to select specific backends.

== I'm using vo=vaapi or vo=vdpau, but there are problems ==

First off: DO NOT USE THESE VOs. They are broken and old. There is no reason to use them. Just don't override the VO selection and use the default. Some users seem to think using these VOs is required for hardware decoding. This is not true. If you want hardware decoding, use --hwdec=auto, which may use some of these APIs for decoding. (On older Nvidia drivers, you may need --gpu-context=x11 in addition.)

These VOs use rather old video output APIs, which have been mostly abandoned by their vendors. In particular, vaapi is known to be thoroughly broken in most Intel drivers. It's not surprising to see major bugs and problems, and mpv can do nothing about it.

In some cases, using them might be justified for performance (they might use a hardware overlay, most often these are just emulated with shaders though).

== Video on RPI doesn't work, or is too slow ==

You need to build FFmpeg with mmal support - this is not enabled by default in FFmpeg. mpv also needs to be compiled with mmal, and the Broadcom firmware libEGL. Otherwise hardware decoding and scaling cannot be enabled.

You can check whether the FFmpeg (libavcodec) linked to mpv is built with mmal with <code>mpv --hwdec=help|grep mmal</code>. Before mpv 0,.28, this might have been called <code>rpi</code> instead of <code>mmal</code>, and the hwdec help output does not indicate whether FFmpeg actually was built with support. If the output is empty, FFmpeg was not correctly built. You can check whether mpv was built with mmal with <code>mpv --vo=help|grep rpi</code>.

It's rather complicated to get this to build correctly because RPI userland is a mess. Don't ask us for help, because we don't know your specific system. Keep in mind that the firmware libEGL and Mesa's libEGL (as often shipped by distros) are incompatible.

Once all this is done, run mpv with <code>mpv --hwdec=rpi --vo=rpi file.mkv</code>. Otherwise mpv might use software decoding, which tends to be too slow.

If you get the error <code>mmal: mmal_vc_port_enable: failed to enable port vc.ril.video_render:in:0(I420): ENOMEM</code>, try increasing <code>gpu_mem</code> in <code>/boot/config.txt</code>.

== (How) can I play YouTube playlists? ==

Pretty much like anything else, just pass the playlist URL to mpv. Note that you need a link to the actual playlist (<code>https://www.youtube.com/playlist?list=...</code>), NOT to a video in the playlist (<code>https://www.youtube.com/watch?v=...&list=...&index=...</code>). You can get that link by clicking on the title of the playlist on the right.

== If I click mpv, nothing happens. ==

mpv is a command line program and doesn’t provide an actual GUI. You need to start it with a media file. On Windows, you can create a file association with the <code>Open with…</code> context menu. Also, if you start <code>mpv.exe</code> from <code>explorer.exe</code>, it will enter [http://mpv.io/manual/master/#pseudo-gui-mode pseudo-gui mode]. For Linux, a <code>mpv.desktop</code> file is provided.

You can also start mpv with <code>mpv --player-operation-mode=pseudo-gui</code>. You play files by dropping them on the window.

== How can I change video quality on YouTube? ==

Check available format of video by '''youtube-dl''':

<pre>youtube-dl --list-formats <link></pre>
or<br />
<code>youtube-dl -F <link></code>

For example:

<pre>youtube-dl -F https://www.youtube.com/watch?v=SYM-RJwSGQ8
[info] Available formats for SYM-RJwSGQ8:
format code  extension  resolution note
...
251          webm       audio only DASH audio  149k , opus @160k, 4.29MiB
135          mp4        854x480    480p 1159k , avc1.4d401e, 25fps, video only, 16.02MiB
247          webm       1280x720   720p 1372k , vp9, 25fps, video only, 20.12MiB
136          mp4        1280x720   720p 2318k , avc1.4d401f, 25fps, video only, 30.37MiB
248          webm       1920x1080  1080p 2402k , vp9, 25fps, video only, 35.54MiB
137          mp4        1920x1080  1080p 3770k , avc1.640028, 25fps, video only, 55.70MiB
22           mp4        1280x720   hd720 , avc1.64001F,  mp4a.40.2@192k (best)
...</pre>
Choice format and type

<pre>mpv --ytdl-format [format code] https://www.youtube.com/watch?v=SYM-RJwSGQ8</pre>
For 1280x720:

<pre>mpv --ytdl-format 22 https://www.youtube.com/watch?v=SYM-RJwSGQ8</pre>
You can mix different video+audio:

<pre>mpv --ytdl-format [video format code] + [audio format code] link</pre>
For mp4 1080p video (3770k) and webm audio (149k, opus @160k):

<pre>mpv --ytdl-format 137+251 https://www.youtube.com/watch?v=SYM-RJwSGQ8</pre>

You can also use the special aliases '''bestvideo''' and '''bestaudio''', and also use conditionals. (See '''youtube-dl --help''' for a full documentation). As an example, if you always want to use the best video stream but only up to 1440p - and falling back to the best single-file format when not playing DASH streams - you can use something like this:

<pre>ytdl-format=bestvideo[height<=?1440]+bestaudio/best</pre>
== How can I change volume using the mouse wheel? ==

By default, volume is changed by scrolling horizontally. If you want to use vertical scrolling for that (rather than seeking), put this in your <code>input.conf</code>:

<pre>AXIS_UP    add volume 2
AXIS_DOWN  add volume -2</pre>

== How can I find out the names and commands associated with each key? ==

Run mpv in [http://mpv.io/manual/master/#options-input-test input test mode]:

<code>mpv --input-test --force-window --idle</code>

== Is FFmpeg or Libav preferred for use with mpv? ==

Generally FFmpeg, simply because it has more features. Don't expect subtitles to work on Libav. Libav support may be broken at times, because they did not yet add certain FFmpeg API changes which mpv relies on.

Do not confuse Libav with e.g. libavcodec. libavcodec is a library that is provided by both the FFmpeg and Libav projects. Their APIs are almost the same, with subtle differences.

== How can I make mpv the default application to open movie files on MacOS (OSX)? ==

<ul>
<li><p>Install mpv as an app with Homebrew:</p>
<source lang="bash">$ brew install mpv --with-bundle</source>
<li><p>If you need alias in Applications/Launchpad, open Finder window at /usr/local/Cellar/mpv/your_mpv_version/. In there the mpv.app bundle was generated. While holding Cmd+Alt drag this .app onto Applications folder.</p>
<li><p>Use [https://github.com/moretension/duti <code>duti</code>] to associate files with application:</p>
<source lang="bash">$ brew install duti
$ duti -s io.mpv avi all
$ duti -s io.mpv mkv all
$ duti -s io.mpv mp4 all</source></li></ul>

[https://github.com/kdeldycke/dotfiles/commit/380fed4e58070e10be9854636b8384960d3ee1d2 Source].

== I want the old PulseAudio volume control back on Linux ==

With mpv 0.18.1, volume control was forced to softvol, and the <code>--softvol</code> option was removed. PulseAudio volume control (as in changing the per-client volume in the server) is not used anymore. The following things change with this as perceived by users with default settings:

* changing volume in mpv now affects only the current mpv instance
* volume is not saved across all instances (though it will be saved for the current instance/media file if you use the watch-later feature)
* volume is not limited to 100% anymore
* you cannot use mpv volume controls to set the volume higher than your current PulseAudio volume settings

It is recommended that you use a separate, non-mpv key binding to control your global volume.

If you want the old behavior, you have to switch you key-bindings manually to the audio output volume controls:

* open your input.conf (see [https://mpv.io/manual/master/#files here] for default location)
* add the following lines:

<pre>9 add ao-volume -2
0 add ao-volume 2</pre>

* or replace any occurrences of <code>volume</code> with <code>ao-volume</code>
* don’t forget that lines starting with <code>#</code> are commented (the default input.conf has all entries commented)
* note that mpv 0.18.1 had a bug that made PulseAudio “stuck” if the step was <code>1</code> and not <code>2</code> - this has been fixed in later versions
* options like <code>--volume</code> can never influence the server value
* you can do the same with the mute key binding (<code>mute</code> -&gt; <code>ao-mute</code>)

You can also grab all volume bindings from the [https://raw.githubusercontent.com/mpv-player/mpv/master/etc/input.conf default input.conf] to change all <code>volume</code> bindings.

Note this this also works on other audio outputs and platforms. Which kind of volume <code>ao-volume</code> controls depends entirely on the audio API. Some APIs make it the global system volume, some make it per-client or per-stream private volume.

For technically inclined people: there was also a branch adding change that would have allowed to change all key bindings with a single option, but it hasn’t proven popular so far: https://github.com/mpv-player/mpv/commit/7621a028bf555c9ed0430501bc6eac2fa204114c

== I want the old OSC back ==

In mpv 0.21.0 the default OSC layout was changed to bottombar, along with other settings that worked better with it.

Create a <code>lua-settings/osc.conf</code> text file inside mpv’s configuration directory and use the following settings:

<source lang="ini">layout=box
seekbarstyle=slider
deadzonesize=0
minmousemove=3</source>
In mpv 0.22.0, bottombar and topbar layouts were enlarged to have the same size in <code>scalewindowed=1</code> as before with <code>scalewindowed=1.5</code>.

If you were using those layouts already and want the scale back as it was before 0.22.0, calculate it with <code>𝑥/1.5</code> where 𝑥 is the old value. So if are looking for the equivalent to <code>scalewindowed=1</code>, use these <code>lua-settings/osc.conf</code>:

<source lang="ini">scalewindowed=0.666
scalefullscreen=0.666</source>
Other options are available in the [https://mpv.io/manual/stable/#configurable-options manual].

== How does youtube-dl work? Does it download the stream to disk? ==

The mpv youtube-dl wrapper script calls <code>youtube-dl -J</code> on URLs that begin with http(s). This returns a direct media link from which mpv streams directly. Nothing is downloaded to disk. Once playback starts, youtube-dl has exited and is not active anymore.

See the manual for available options: https://mpv.io/manual/master/#options-ytdl

== Why were some cache options removed or changed (stream cache)? ==

Starting with mpv 0.30.0, some cache options have been removed (`--cache-default`, `--cache-initial`, `--cache-seek-min`, `--cache-backbuffer`, `--cache-file`, `--cache-file-size`), or changed (`--cache` does not take a size in KB anymore). This is a consequence of removing the stream cache, which was a ringbuffer of input data between demuxer and network level.

Caching is now done on the demuxing layer (between demuxer and decoder), which is controlled by separate options: `--cache-secs`, `--demuxer-readahead-secs`, `--demuxer-max-bytes`, `--demuxer-max-back-bytes`. Instead of `--cache-file`, `--cache-on-disk` is available.

== On Windows, why does mpv.exe not attach to the console and what does mpv.com do? ==

This is a limitation of the Windows platform. There are two so-called subsystems on Windows: the GUI subsystem and the CLI subsystem. A Windows executable can only use one of them. If a program uses the CLI subsystem, it can attach to the console, print messages there and receive input. However, such a program will always open a console window of its own if it is not already being run from one. A program using the GUI subsystem on the other hand will not attach to the console it is being called from, and control will immediately return to the command prompt. To work around that limitation, mpv has a separate executable, called mpv.com, which uses the CLI subsystem and redirects input and output for mpv.exe. Since Windows looks for executables with the .com suffix first (by default; defined by the %PATHEXT% variable), just typing mpv without a suffix on the command prompt will run mpv.com and you will get console output as expected.

== How do I automatically play the next file in the folder? ==

Either pass all files to mpv, e.g. run this in the directory with the files:
<pre>mpv *.*</pre>
Or use a script like https://github.com/mpv-player/mpv/blob/master/TOOLS/lua/autoload.lua .

== FFmpeg ABI compatibility ==

mpv does not support linking against FFmpeg versions it was not built with, even
if the linked version is supposedly ABI-compatible with the version it was
compiled against. Expect malfunctions, crashes, and security issues if you
do it anyway.

The reason for not supporting this is because it creates far too much complexity
with little to no benefit, coupled with absurd and unusable FFmpeg API
artifacts.

Newer mpv versions will refuse to start if runtime and compile time FFmpeg
library versions mismatch. It will print this error message (cut short), and then exit:

<pre>mpv was compiled against a different version of FFmpeg/Libav...</pre>

To fix this, rebuild mpv.

== Why does mpv not support Lua 5.3? ==

Lua 5.3 is a different language from 5.1 or 5.2. Simply switching to Lua 5.3 would probably break most user scripts. The changes that make 5.3 incompatible are larger and have a greater impact than the changes that were done from 5.1 to 5.2 (or between LuaJIT and 5.1/5.2). This is especially due to the introduction of the integer type. Moreover, this would mean dropping LuaJIT support, as LuaJIT supports the 5.1/5.2 language only.

Supporting both languages for a time would be theoretically possible. But it would require separate backends, and significant effort to avoid the symbol conflicts between Lua 5.2 and 5.3 (maybe even impossible to do with distro-provided libs), so it won't be done.

== Why is there no DVD/Bluray menu support? And DVD/BD support in general. ==

DVD menu support existed since early times, but was removed because it was a maintenance nightmare. It affected unrelated parts of the player deeply, and prevented improving more important features. In addition, it never worked well. Later, DVD menu support was added again using rewritten code (and then Bluray menu support). However, despite the rewrite, it still affected the player core (preventing improvements in other areas), and it still did not work well.

The opinion of the developers is that menu support is cursed, and not worth implementing anyway. In addition to the monumental effort required to make it work well, only very few users benefit from it. It is a fact that playing DVDs/BDs gives a much better user experienced when ripped to files, which precludes menu support.

As a consequence, mpv only has some fallback support for optical media discs. Please don't report issues to it, as there is little chance of any improvements done to it.

If you are a developer and want to improve DVD/BD support in mpv, you are welcome to do so. But note that intrusive changes to the playback core will most likely not be accepted. Most code related to it must be isolated in a separate module (for example stream_blurray.c, although it's allowed to change the layer at which the module is implemented).

== How is mpv related to MPlayer? ==

The relation between the two projects is mostly historic. They should be considered two separate projects. mpv and MPlayer are different software, incompatible to each other. There is no overlap in developers and other project members between MPlayer and mpv. mpv is not a drop-in replacement for MPlayer, and the command line switches and behavior are different.

MPlayer users should not expect that mpv is in any way similar to it. Both are CLI video players, and have common roots, but in some areas there are radical differences. An old and outdated summary of changes can be found here: https://github.com/mpv-player/mpv/blob/master/DOCS/mplayer-changes.rst

mpv is based on MPlayer's code. At first, there was the mplayer2 project, which forked away from MPlayer roughly in 2008, and went different ways from it. (It was renamed to mplayer2 only a few years later, causing general confusion.) In 2012, some newer developers, who joined mplayer2 development around 2011, forked mplayer2 again. This second fork was then renamed to mpv.

The reason for this fork was disagreement over the direction of development. While MPlayer focuses on maintenance and not breaking old code and features, mpv wanted to go into the other direction, modernization. This included merciless removal of code/features that were not considered worth maintaining due to being obscure and unused, or rewriting existing code to clean it up and to reduce bugs. Reducing maintenance burden by replacing MPlayer code with FFmpeg mechanisms was also a priority. mplayer2 was stuck between those positions - first going for mpv's direction, but then remaining stagnant with slow development. The mplayer2 project soon went inactive after the mpv fork, and is completely gone today.

We consider mpv's radical approach successful, making the code easier to work with, removing bugs, and making it easier to add new features. We added modern features wanted by users in exchange for removing large amounts of features barely anyone used anymore.

One result is that mpv development has nothing to do with MPlayer development anymore. They are completely separate projects. The mplayer2 period might have contributed to the relative isolation between the two projects. After all these years of going separate directions, merging MPlayer and mpv back into one project wouldn't make sense.